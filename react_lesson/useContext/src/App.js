import {useState} from 'react';
import Form from './Form';
import dataContext from './context';
import './App.css';

// Контекст позволяет передавать данные через дерево компонентов без необходимости передавать пропсы на промежуточных уровнях
// Контекст используют как третий вариант построения приложения и одним общим состоянием
// Любой компонент может иметь любое количество конекстов 
// Контекст используют для того, чтобы передавать определенные данные ниже по иерархии не используя props
// Основными компонентами Контекста являются CreateContext, Provider, Consumer
// Можна задаться несколькими вопросами:
// 1. Если компоненты у нас находятся в разных файлах, то как с ними взаимодействовать? ...
// ... Ответ: на них действуют все те же правила import, export
// Сейчас мы создадим несколько файлов context.js, Input.js, Form.js
// 2. Может ли приложение использовать больше одного контекста? ...
// ... Ответ: контекст может давать доступ к определенным данным. Под каждый контекст мы создаем новый Provider
// 3. Можна ли данные как-то изменять? ...
// ... Ответ: мы можем модифицировать эти данные
const {Provider} = dataContext;

function App() {
    const [data, setData] = useState({
        mail: 'name@example.com',
        text: 'some text',
        // Указали новое свойство (ссылку на нашу ф-ию)
        forceChangeMail: forceChangeMail
    })

    // Создадим ф-ию которая будет изменять почту в свойстве mail
    function forceChangeMail() {
        // setData({mail: 'test@gmail.com'}) // useState не изменяет наше состояние, он его просто перезаписывает...
        // ...(тоесть нам нужно записать и все остальные состояния, как в примере ниже)
        setData({...data, mail: 'test@gmail.com'})
    }

    return (
        // Когда мы не передадим attr value, это значит что value у нас станет в позицию undefinied ...
        // Если мы используем какие-то новые свойства, то мы обязательно должны их указать в значениях по умолчанию
        // В value мы не должны передавать прямых объектов, например: value={{something: 'something}} ...
        // ... данная запись может вызвать проблемы с оптимизацией, так как у нас заного создается новый объект ...
        // ... который не равен предыдущему
        <Provider value={data}>
            <Form text={data.text}/>
            <button
                onClick={() => setData({
                    mail: 'second@example.com',
                    text: 'some text',
                    forceChangeMail: forceChangeMail
                })}>
                    Click Me
            </button>
        </Provider>
    );
}

export default App;
